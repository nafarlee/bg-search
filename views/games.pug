doctype html

html
  head
    link(rel="stylesheet", href="https://fonts.googleapis.com/css?family=Roboto:300,300italic,700,700italic")
    link(rel="stylesheet", href="https://cdnjs.cloudflare.com/ajax/libs/normalize/8.0.1/normalize.css")
    link(rel="stylesheet", href="https://cdnjs.cloudflare.com/ajax/libs/milligram/1.4.1/milligram.css")
    link(rel="stylesheet", type="text/css", href="/style.css")
    meta(name="viewport", content="width=device-width, initial-scale=1")

  body(class="container")
    h1 #{game.primary_name} (#{game.year})

    h2
      a(href='https://boardgamegeek.com/boardgame/' + game.id) BGG

    h2
      a(href=game.image) Image

    details
      summary Rating
      ul
        li Votes: #{game.rating_votes}
        li Average: #{game.average_rating}
        li Bayes: #{game.bayes_rating}
        li Deviation: #{game.rating_deviation}

    details
      summary Playtime
      ul
        li Minimum: #{game.minimum_playtime}
        li Maximum: #{game.maximum_playtime}
        if game.median_playtime
          li Median: #{game.median_playtime}
        if game.median_playtimes_by_players
          ul
          if game.recorded_play_count
            li Number of Considered Plays: #{game.recorded_play_count}
            each median, players in game.median_playtimes_by_players
              li #{players}: #{median}

    details
      summary Players
      ul
        li Minimum: #{game.minimum_players}
        li Maximum: #{game.maximum_players}

    details
      summary Weight
      ul
        li Votes: #{game.weight_votes}
        li Average: #{game.average_weight}

    if game.description
      details
        summary Description
        each paragraph in game.description.split('&#10;&#10;')
          p !{paragraph}

    if game.categories
      details
        summary Categories
        ul
          each category in game.categories
            li= category

    if game.mechanics
      details
        summary Mechanics
        ul
          each mechanic in game.mechanics
            li= mechanic

    if game.families
      details
        summary Families
        ul
          each family in game.families
            li= family

    if game.designers
      details
        summary Designers
        ul
          each designer in game.designers
            li= designer

    if game.publishers
      details
        summary Publishers
        ul
          each publisher in game.publishers
            li= publisher

    if game.artists
      details
        summary Artists
        ul
          each artist in game.artists
            li= artist

    if game.alternate_names
      details
        summary Alternate Names
        ul
          each alternate_name in game.alternate_names
            li= alternate_name

    if game.player_recommendations
      details
        summary Player Recommendations
        ul
          each pr in sortByProperty(game.player_recommendations, 'players')
            - const total = pr.best + pr.recommended + pr.not_recommended
            li #{rangeToText(pr.players)}
              ul
                li Best: #{percentageOf(pr.best, total)} (#{pr.best})
                li Recommended: #{percentageOf(pr.recommended, total)} (#{pr.recommended})
                li Not Recommended: #{percentageOf(pr.not_recommended, total)} (#{pr.not_recommended})
